<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Hugo on yysog&#39;s blog</title>
    <link>http://yysog.com/tags/hugo/</link>
    <description>Recent content in Hugo on yysog&#39;s blog</description>
    <image>
      <title>yysog&#39;s blog</title>
      <url>http://yysog.com/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>http://yysog.com/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- 0.136.5</generator>
    <language>zh</language>
    <lastBuildDate>Thu, 29 Aug 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://yysog.com/tags/hugo/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>hugo&#43;Nginx本地部署</title>
      <link>http://yysog.com/posts/hugo&#43;nginx%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2/</link>
      <pubDate>Thu, 29 Aug 2024 00:00:00 +0000</pubDate>
      <guid>http://yysog.com/posts/hugo&#43;nginx%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2/</guid>
      <description>&lt;p&gt;最近想把之前写的markdown笔记部署起来搭个博客，主要有下面两方面考虑：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;便于多端访问：之前都用smb共享，但在移动端体验一般。&lt;/li&gt;
&lt;li&gt;便于格式的统一&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;考虑到之后可能会将之些笔记部署的云上或github上，为了方便迁移，选择静态博客生成工具&lt;a href=&#34;https://gohugo.io/&#34;&gt;hugo&lt;/a&gt;.大多数教程的部署方案都是使用github action，但考虑到github正常访问速度等问题，故pass。&lt;/p&gt;
&lt;p&gt;由于手头有一台闲置的笔记本，目前用来当一个简单的服务器用，像一些smb，alist，ql等乱七八糟的内容都挂在上面。现在想把博客也挂上去，主要在局域网内访问，在外面需要的话也可以用内网穿透服务临时用一下。&lt;/p&gt;
&lt;h2 id=&#34;需求&#34;&gt;需求&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;移植性好，以便日后可能的平台迁移(静态生成工具移植都方便)&lt;/li&gt;
&lt;li&gt;尽量降低对markdown编写侵入，编写完后自动化构建&lt;/li&gt;
&lt;li&gt;可以在不同应用编辑Markdown文档(主要是图片路径问题)&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;方案&#34;&gt;方案&lt;/h2&gt;
&lt;p&gt;自动化构建思路主要就两种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;hugo server + nginx反向代理&lt;/li&gt;
&lt;li&gt;inotifywait + 脚本&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最开始本想通过直接通过第一种来实现。但后来发现有些应用(obsidian，还&lt;a href=&#34;https://forum.obsidian.md/t/disable-auto-save-or-change-frequency/14230/35&#34;&gt;无法关闭&lt;/a&gt;)在写markdown的时候会自动保存文档，而且频率相当高。这就导致用hugo server后需要经常性的编译写好的文档，对性能影响较大，没办法就只能用inotifywait写脚本监听文件变化了。&lt;/p&gt;
&lt;p&gt;流程如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建一个文件deploy.md，用于inofitywait监控&lt;/li&gt;
&lt;li&gt;当编写完markdown后，能过修改文件deploy.md触发事件&lt;/li&gt;
&lt;li&gt;inotiywait收到事件后执行脚本编译，并将编译后的文件同步到nginx&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;具体过程&#34;&gt;具体过程&lt;/h3&gt;
&lt;p&gt;使用&lt;a href=&#34;https://man.archlinux.org/man/inotifywait.1&#34;&gt;inofitywait&lt;/a&gt;先安装&lt;code&gt;inotify-tools&lt;/code&gt;包：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;sudo pacman -S inotify-tools&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;对于文件deploy.md，并没有啥要求。之所有选择md文件，主要是由于大部分markdown软件默认只显示md文件。inofitywait选择监控close_write事件，当想要发布内容时只需要随便改动一下文件保存即可。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;推荐放一个复选框&lt;code&gt;- [ ] trigger&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;监测deploy.md事件脚本(deployer.sh)：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#!/bin/bash
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;flagPath&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/path/to/you/deploy.md&amp;#34;&lt;/span&gt;   &lt;span class=&#34;c1&#34;&gt;# 参考：${HOME}/share/hugo/deploy.md&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;deployerPath&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/path/to/your/hugo/site&amp;#34;&lt;/span&gt;   &lt;span class=&#34;c1&#34;&gt;# 参考：${HOME}/projects/hugo/blog&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;nginxPath&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/path/to/your/nginx/html/&amp;#34;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# 参考: ${HOME}/projects/docker/nginx/html/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;sleepTime&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;# 触发构建后10s之后才能再次构建&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; true&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nv&#34;&gt;file&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;inotifywait -qe &lt;span class=&#34;s1&#34;&gt;&amp;#39;close_write&amp;#39;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$flagPath&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;read&lt;/span&gt; file&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$file&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;fi)&lt;/span&gt;       &lt;span class=&#34;c1&#34;&gt;# 监听close_write事件，即以可写模式打开后关闭触发&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        hugo --quiet --cleanDestinationDir -s &lt;span class=&#34;nv&#34;&gt;$deployerPath&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; rsync --delete -a &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;deployerPath&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/public/&amp;#34;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$nginxPath&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# 编译并将public同步到nginx的html下&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$?&lt;/span&gt; -eq &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Successfully deployed &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$deployerPath&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; to &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$nginxPath&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;        fi
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;        sleep &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$sleepTime&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;done
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;systemd单元文件blog-deployer.service&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
